# Targets using CPU-based execution
foreach(bench blas3)
   add_executable(${bench}bench-cpu ${bench}.cpp)
endforeach()

if (ENABLE_UBLAS)
    include_directories(${Boost_INCLUDE_DIRS})
    foreach(bench sparse solver vector)
      add_executable(${bench}bench-cpu ${bench}.cpp)
    endforeach()
endif (ENABLE_UBLAS)
  

# Targets using OpenCL
if (ENABLE_OPENCL)

  foreach(bench blas3 blas3_graph generator_bandwidth opencl)
    add_executable(${bench}bench-opencl ${bench}.cpp)
    target_link_libraries(${bench}bench-opencl ${OPENCL_LIBRARIES})
    set_target_properties(${bench}bench-opencl PROPERTIES COMPILE_FLAGS "-DVIENNACL_WITH_OPENCL")
  endforeach()

  set(bench autotuned_blas3)
  add_executable(${bench}bench-opencl ${bench}.cpp ${PROJECT_SOURCE_DIR}/external/pugixml/src/pugixml.cpp)
  target_link_libraries(${bench}bench-opencl ${OPENCL_LIBRARIES})
  set_target_properties(${bench}bench-opencl PROPERTIES COMPILE_FLAGS "-DVIENNACL_WITH_OPENCL -DVIENNACL_ENABLE_AUTOTUNE -I${PROJECT_SOURCE_DIR}/external")

  
  if (ENABLE_UBLAS)
     include_directories(${Boost_INCLUDE_DIRS})
     foreach(bench sparse solver vector)
       add_executable(${bench}bench-opencl ${bench}.cpp)
       target_link_libraries(${bench}bench-opencl ${OPENCL_LIBRARIES})
       set_target_properties(${bench}bench-opencl PROPERTIES COMPILE_FLAGS "-DVIENNACL_WITH_OPENCL")
     endforeach()
  endif (ENABLE_UBLAS)
  
endif (ENABLE_OPENCL)

# Targets using CUDA
if (ENABLE_CUDA)
  
  foreach(bench blas3)
     cuda_add_executable(${bench}bench-cuda ${bench}.cu)
  endforeach()
  
  if (ENABLE_UBLAS)
     include_directories(${Boost_INCLUDE_DIRS})
     foreach(bench sparse solver vector)
       cuda_add_executable(${bench}bench-cuda ${bench}.cu)
     endforeach()
  endif (ENABLE_UBLAS)
  
endif (ENABLE_CUDA)


# IF(CMAKE_COMPILER_IS_GNUCXX)
   #ADD_DEFINITIONS(-Wall -pedantic -O0 -g)
#   ADD_DEFINITIONS(-Wall -pedantic -O3)
# ENDIF(CMAKE_COMPILER_IS_GNUCXX)
